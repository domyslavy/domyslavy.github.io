<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[优化算法之遗传算法]]></title>
    <url>%2F%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%2F%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95%2F</url>
    <content type="text"><![CDATA[说在前面: 遗传算法（genetic algorithm，GA）是模拟自然界生物进化的机制的一种算法，即遵循适者生存、优胜劣汰的法则，也就是寻优过程中仿照遗传机制，将优秀基因（建模的重点）进行选择（selection）、交叉(crossover)、变异(mutation)，其中由适应度函数来判断基因的优劣，，以产生更加优秀的基因为目的，使基因不断进化的一种算法。 注意：遗传算法在适应度函数选择不当的情况下有可能收敛于局部最优，而不能达到全局最优。更加客观的说，一个问题的全局最优往往很难通过基于概率的算法得到，无法遍历整个求解的空间，往往是快速的找到一个足够好的答案，因为有些问题在遍历整个求解空间的复杂性是难以接受的。 1.1 遗传算法的基本概念1.1.1 遗传算法的基本运算遗传算法是从代表问题可能潜在的解集的一个种群开始的，而一个种群则由经过基因编码的一定数目的个体组成。基因是决定个体形状的外在表现，如黑头发的特征是有染色体中控制这一特征的某种基因组合决定的。因此，在一开始需要实现从表现型到基因型的映射即 编码工作。 由于生物的基因编码的工作复杂，我们一般采取简化，如二进制编码。初代种群产生之后，按照适者生存和优胜劣汰的原理，逐代演化产生出越来越好的近似解，在每一代，根据问题域中个体的适应度大小选择个体，并借助于自然遗传学的遗传算子（genetic operators）进行组合交叉 和 变异，产生出新的解集的种群。 1.1.2 遗传算法的特点遗传算法是一种解决搜索问题的一种通用算法，对于各种通用问题都可以使用。 遗传算法从问题解的串集开始搜索，而不是从单个解开始。传统的优化算法是从单个初始值迭代求最优解的，容易误入局部最优解，而遗传算法从串集开始搜索，覆盖面大，利于全局择优。 同时遗传算法处理群体中的多个个体（相同基因），减少陷入局部最优解的风险。 遗传算法基本上不用搜索空间的知识或其他辅助信息，而进用适应度函数来评估个体，在此基础上进行遗传操作。 遗传算法不是采用确定性规则，而是采用概率的变迁规则来指导搜索的方向。 具有自组织、自适应、自学习性。遗传算法利用进化过程中获得的信息自行组织搜索时， 适应性大的个体具有较高的生存概率，并获得更适应环境的基因结构。 1.1.3 遗传算法中的术语 染色体：(chromosome)又可以称为基因型个体，一定数量的个体组成了群体，群体中个体的数量称为群体大小。 基因：基因是串中的元素，基因用于表示个体的特征。 基因位点：是算法中表示一个基因在串中的位置。 特征值： 在用串表示整数时，基因的特征值与二进制数的权一致。 适应度：各个个体对环境的适应度。为了体现染色体的适应能力，引入了对问题中的每一个染色体都能进行度量的函数，叫适应度函数。 1.1.4 遗传算法的发展现状略 1.1.5 遗传算法的应用领域由于遗传算法的整体搜索策略和优化搜索方法在计算时不依赖于梯度信息或其他辅助知识（其他算法的依赖信息，比如梯度下降算法等），而只需要影响搜索方向的目标函数和相应的适应度函数，所以遗传算法提供了一种求解复杂系统问题的通用框架，不依赖与问题的具体领域。 遗传算法主要应用于以下两个领域： 函数优化 不太理解这块。 组合优化 随着问题规模增大，组合优化问题的搜索空间也急剧增大，有时在目前的计算上用枚举法很难求出最优解。面对这类问题大家更多的精力是放在满意解上，而遗传算法就是寻求这种满意解的最佳工具之一。实践证明，遗传算法对于组合优化中的NP问题非常有效。例如旅行商TSP问题、背包问题、装箱问题等等。GA算法在生成调度方面、自动控制方面、等等取得了广泛应用。 1.2 遗传算法的原理遗传算法是计算机科学中用于解决最优化的一种搜索启发式算法，是进化算法的一种。 1.2.1 算法运算过程在遗传算法中，通过编码组成初始群体后，遗传操作的任务就是对群体的个体按照他们对环境适应度施加一定的操作，从而实现优胜劣汰的进化过程。 遗传操作包括： 选择遗传算子、交叉遗传算子、变异遗传算子 选择 群体中选择优胜的个体，淘汰劣质个体的操作叫选择。选择的目的是把优化的个体直接遗传到下一代或通过配对交叉产生新的个体再遗传到下一代。 选择算子方法：轮盘赌选择法、适应度比例法、随机遍历抽样法、局部选择法。 轮盘赌选择法：是最简单和最常用的选择方法。各个隔日的选择概率和其适应度值成比例。设群体大小为 n ，其中个体 $ i $ 的适应度为$ f_{i } $，则被选择的概率为 $$ p_{ i } = f_{ i } / ( f_1 + f_2 + f_3 …… + f_n ) $$ 交叉 ​ 交叉是指把两个父代个体的部分结构加以替换重组而生成新个体的操作。通过交叉，遗传算法的搜索能力得以飞跃提高。交叉算子根据交叉率将种群中的两个个体随机地交换某种基因，能够产生新的基因组合，基因将有益基因组合在一起，根据编码方式的不同分为以下几种算法。 实值重组：离散重组、中间重组、线性重组、扩展线性重组 二进制交叉：单点交叉、多点交叉、均匀交叉、洗牌交叉、缩小代理交叉 最常用的交叉算子为单点交叉。其具体操作是在个体串中随机的设定一个交叉点，实行交叉时，该点前或后的两个个体的部分结构进行互换，并生成两个新个体。如图: 变异 变异算子的基本内容时对群体中的个体串的某些基因座上的基因值做变动。依据个体编码表示方法的不同，分为实值变异、二进制变异。 基本操作步骤: 对群中所有个体以事先设定的变异概率判断是否进行变异 对进行变异的个体随机选择变异位进行变异 引入变异的两个目的： 使遗传算法具有局部的随机搜索能力。当遗传算法通过交叉算子已接近最优解领域时，利用变异算子的这种局部随机搜索能力可以加速向最优解收敛。（为啥呢，单个位点的变化，作用真的会达到如此之大？？），此种情况下的变异概率应取较小值，否则解近最优解的积木块会因变异而遭到破坏。（这句话也不太明白） 使遗传算法可维持群体多样性，以防止出现未成熟收敛现象。此时收敛概率应选较大值。 遗传算法中，交叉算子因其全局搜索功能而作为主要算子，变异算子因其局部搜索能力而作为辅助算子。遗传算法通过交叉和变异这对互相配对又互相竞争的操作而使其具备兼顾全局和局部的均衡搜索能力。 1.2.2 算法编码遗传算法不能直接处理问题空间的参数，必须把它们转换成遗传空间的由基因按一定结构组成的染色体或个体。这一转换操作称为编码，也可以称为（问题的）表示。 这一步骤比较难。 1.2.3 适应度及其群体选取进化论中的适应度，是表示某一个个体对环境的适应能力，也表示该个体繁殖后代的能力。遗传算法的适应度函数是用来判断群体中的个体的优劣程度的指标，它是根据所求问题的目标函数来进行评估的。]]></content>
      <categories>
        <category>数学建模</category>
      </categories>
      <tags>
        <tag>数学建模</tag>
        <tag>优化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CS:APP笔记(持续更新)]]></title>
    <url>%2F%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8E%9F%E7%90%86%2FCSAPP%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[主存是什么?讲到主存，就应该知道计算机存储器类型，计算机存储器类型分为两种: 易失性存储器（内存）、非易失性存储器（外存）。其中内存就是我们常言道的随机存取存储器（Random Access Memory，RAM）。那你是否听说过Cache（高速缓冲存储器），那这个与内存有什么联系呢? 我们常说的内存条又是啥关系呢？那我们通常指的是DRAM（动态随机存取存储器）、SRAM（静态随机存取存储器）是啥联系呢？ 首先我们先搞清楚内存的定义: 随机存取存储器（英语：Random Access Memory，缩写：RAM），也叫主存，是与CPU直接交换数据的内部存储器。它可以随时读写（刷新时除外），而且速度很快，通常作为操作系统或其他正在运行中的程序的临时数据存储介质。（来源于维基百科） 从以上定义可知，主存是一个等价于内存的东西，内存条如今（2019年）常用版本为DDR3、DDR4。 DDR是Double Data Rate的简称，其全称为（英语：Double Data Rate Synchronous Dynamic Random Access Memory，简称DDR SDRAM）为具有双倍数据传输率的SDRAM，其数据传输速度为系统时脉的两倍，由于速度增加，其传输性能优于传统的SDRAM。（来源于维基百科） 由此可知内存条其实就是我们所熟知的DRAM，只不过是一种DRAM的更高级的版本。而我们常知的Cache是SRAM。 静态随机存取存储器（Static Random-Access Memory，SRAM）是随机存取存储器的一种。所谓的“静态”，是指这种存储器只要保持通电，里面储存的数据就可以恒常保持。相对之下，动态随机存取存储器（DRAM）里面所储存的数据就需要周期性地更新。然而，当电力供应停止时，SRAM储存的数据还是会消失（被称为volatile memory），这与在断电后还能储存资料的ROM或闪存是不同的。（来源于维基百科） 主存（Main memory）即计算机内部最主要的存储器，用来加载各式各样的程序与数据以供CPU直接运行与运用。DRAM由于造价便宜，速度也很快，所以普及很多。DRAM每一个比特的数据都只需一个电容跟一个晶体管来处理，相比之下在SRAM上一个比特通常需要六个晶体管。正因这缘故，DRAM拥有非常高的密度，单位体积的容量较高因此成本较低。但相反的，DRAM也有访问速度较慢，耗电量较大的缺点。 所以内存 $\approx $ DRAM + SRAM ，随着硬件技术的更替，以后应该远远不局限这两种。而ROM大家想了解的话，请点击这里。另外也推荐看一下这个知道答案 gbxwal 回答。]]></content>
      <categories>
        <category>计算机原理</category>
      </categories>
      <tags>
        <tag>计算机原理</tag>
        <tag>CMU</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C语言与python的执行过程]]></title>
    <url>%2F%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%2FC%E8%AF%AD%E8%A8%80%E4%B8%8Epython%E7%9A%84%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[​ 编程语言分为编译型语言、解释型语言。 编译语言（英语：Compiled language）是一种以编译器来实现的编程语言。编译器先将代码编译为机器代码，再加以运行。理论上，任何编程语言都可以是编译式，或直译式的。它们之间的区别，仅与程序的应用有关。 解释型语言（英语：Interpreted language），是一种编程语言。这种类型的编程语言，会将代码一句一句直接运行。这种编程语言需要利用解释器，在运行期，动态将代码逐句解释（interpret）为机器代码，或是已经预先编译为机器代码的的子程序，之后再运行。(来源于维基百科) 编译型语言与解释型语言没有一个绝对的分界线，现在的语言更偏向于两者的混合，最能区分的特征是代码是一句一句的运行还是先将源文件翻译，再运行。 编译型语言以C语言为例： 大家都知道C语言编写的源代码是一个后缀名为.c的文件，经过编译后转换为机器上可运行的可执行文件。而其中变化的过程我们将一步步展开，请看下图。 大家可能会疑惑，C语言编译的过程中除了会生成.exe可执行文件外，还会生成.obj文件。其实其中就对应了两个过程，编译与链接。编译： 编译过程又可分为3步，预编译、编译、汇编，整个编译过程其本质就是读取源程序（字符流），对之进行词法和语法的分析，将高级语言指令转换为功能等效的汇编代码。而其中涉及到对于宏定义指令、条件编译指令、头文件包含指令、特殊符号、以及对于.obj文件的优化。 汇编过程是由汇编程序生成的目标文件并不能立即就被执行，其中可能还有许多没有解决的问题。 链接程序的主要工作就是将有关的目标文件彼此相连接，也即将在一个文件中引用的符号同该符号在另外一个文件中的定义连接起来，使得所有的这些目标文件成为一个能够按操作系统装入执行的统一整体。 C语言的编译细节或许需要了解gcc编译器，若感兴趣的朋友请点击这里C语言的编译过程的步骤也来源于此。]]></content>
      <categories>
        <category>编译原理</category>
      </categories>
      <tags>
        <tag>C语言</tag>
        <tag>python</tag>
        <tag>编译原理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[计算机组成原理(持续更新)]]></title>
    <url>%2F%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8E%9F%E7%90%86%2F%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86(%E7%AC%AC2%E7%89%88)%2F</url>
    <content type="text"><![CDATA[第一章 计算机系统概述1.1计算机系统简介 1.1.1 计算机的软硬件概念 以下是无关痛痒的几个名词介绍。 硬件，是指的计算机实体部分，是由CPU、主机、外设等。 软件，是由人们事先编制的具有各类特殊功能的程序组成。把··这些程序寄寓于各类媒体（RAM、ROM、等存储设备）。主要分为系统软件 与 应用软件。 系统软件 ：对于硬件资源的调配，主要用来管理整个计算机系统，监视服务，使系统资源得到合理的调配，高效运行。如：操作系统、语言处理程序等等。 应用软件 ：是用户根据任务需要所编制的各种程序。其种类各种各样，比如聊天应用软件，音乐播放器之类。 1.1.2 计算机系统的层次结构 程序运行的本身，源程序—-&gt;一层或多层虚拟机器—-&gt;机器语言，最终转换为机器语言交付于计算机硬件执行操作。 早期计算机只有机器语言，用户必须使用0、1代码表示的语言进行编写程序，对程序员对使用的计算机硬件及其指令系统十分熟悉，编写难度大，因此20世纪50年代开始出现符号式的程序设计语言，即汇编语言，就出现了两级层次结构。 汇编语言的弊端: 从本质上，汇编语言仍是面对实际机器的语言，每一条汇编语句都相当于是机器语言的某一条语句（01代码片段）的一种替换。因此，使用汇编语言仍然无法避免使用机器语言对实际机器底层的了解这一弊端，只是简化了机器语言的编写，加强了可读性。对于底层的抽象仍然没有很好。 另一方面，由于汇编语言的局限性，仍然是无法摆脱实际机器的指令系统，具有很差的可移植性，通用性，不利于计算机的广泛应用和发展。 由于汇编语言的弊端，因此从20世纪60年代先后出现了更为高级的语言，FORTRAN、BASIC、PASCAL、C等。就避免了对于编码时对于实际机器的机型、内部的具体组成及其指令系统，仅需掌握高级语言的语法和语义，便可直接进行编程。但是编码需要进行先对高级语言转换为汇编语言（或者其他中间语言程序），再将其翻译成及其语言程序，再交付执行，由此得出了三级层次结构的计算机系统。 （？当第三方语言重新编译为汇编语言后，汇编语言本身对于计算机指令集与底层的信息要求高，第三方语言通过编译器编译为汇编的过程时，是否编译器软件考虑了计算机本身的指令集等底层信息？） 1.2计算机的基本组成 1.2.1 冯诺依曼计算机的特点 1.2.2 计算机的硬件框图 1.2.3 计算机的工作步骤 1.3 计算机硬件的主要技术指标 1.3.1 机器字长 1.3.2 存储容量 1.3.3 运算结构]]></content>
      <categories>
        <category>计算机原理</category>
      </categories>
      <tags>
        <tag>计算机组成原理</tag>
        <tag>本科课程笔记</tag>
      </tags>
  </entry>
</search>
